[2023-10-07 09:59:21,144]root - INFO - get training pipeline config function started
[2023-10-07 09:59:21,144]root - INFO - training pipeline config : TrainingPipelineConfig(artifact_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact')
[2023-10-07 09:59:21,145]root - INFO - get data ingestion config function started
[2023-10-07 09:59:21,146]root - INFO - data ingestion config : DataIngestionConfig(dataset_download_url='https://archive.ics.uci.edu/static/public/73/mushroom.zip', raw_data_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_ingestion\\2023-10-07-09-59-08\\raw_data', zip_data_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_ingestion\\2023-10-07-09-59-08\\zip_data', ingested_train_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_ingestion\\2023-10-07-09-59-08\\ingested_data\\train', ingested_test_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_ingestion\\2023-10-07-09-59-08\\ingested_data\\test')
[2023-10-07 09:59:21,149]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Ingestion log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-10-07 09:59:21,149]root - INFO - intitate data ingestion function started
[2023-10-07 09:59:21,149]root - INFO - download mashroom data function started
[2023-10-07 09:59:21,149]root - INFO - downlaodind data from https://archive.ics.uci.edu/static/public/73/mushroom.zip in the D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\zip_data folder
[2023-10-07 09:59:21,171]root - INFO - -----data download started-----
[2023-10-07 09:59:23,265]root - INFO - -----data download completed-----
[2023-10-07 09:59:23,266]root - INFO - get extracted data function started
[2023-10-07 09:59:23,267]root - INFO - extracting data from D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\zip_data\mushroom.zip into D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\raw_data folder
[2023-10-07 09:59:23,499]root - INFO - get train test split function started
[2023-10-07 09:59:23,500]root - INFO - data file name : agaricus-lepiota.data
[2023-10-07 09:59:23,500]root - INFO - -----data reading started-----
[2023-10-07 09:59:23,976]root - INFO - -----data reading completed-----
[2023-10-07 09:59:23,977]root - INFO - -----splitting data started-----
[2023-10-07 09:59:24,052]root - INFO - -----splitting data completed-----
[2023-10-07 09:59:24,052]root - INFO - combining input and output features
[2023-10-07 09:59:24,083]root - INFO - saving train data as csv
[2023-10-07 09:59:24,269]root - INFO - saving test data as csv
[2023-10-07 09:59:24,409]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Ingestion log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 


[2023-10-07 09:59:24,409]root - INFO - get data validation config function started
[2023-10-07 09:59:24,409]root - INFO - data validation config : DataValidationConfig(schema_file_dir='D:\\projects\\mushroom_classification\\config\\schema.yaml', report_page_file_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_validation\\2023-10-07-09-59-08', report_name='report.html')
[2023-10-07 09:59:24,409]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Validation log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 


[2023-10-07 09:59:24,409]root - INFO - get column count validation function started
[2023-10-07 09:59:24,441]root - INFO - get train test dataframe function started
[2023-10-07 09:59:24,441]root - INFO - reading train data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\train\agaricus-lepiota.csv
[2023-10-07 09:59:24,722]root - INFO - train file read successfull
[2023-10-07 09:59:24,722]root - INFO - rading test data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\test\agaricus-lepiota.csv
[2023-10-07 09:59:24,909]root - INFO - test file read successfull
[2023-10-07 09:59:24,909]root - INFO - column count in schema file is : 23
[2023-10-07 09:59:24,909]root - INFO - column count in train file is : 23
[2023-10-07 09:59:24,909]root - INFO - column count in test file is : 23
[2023-10-07 09:59:24,909]root - INFO - column count in train dataframe is okky
[2023-10-07 09:59:24,909]root - INFO - column count in test dataframe is okky
[2023-10-07 09:59:24,909]root - INFO - get column name validation function started
[2023-10-07 09:59:24,941]root - INFO - get train test dataframe function started
[2023-10-07 09:59:24,941]root - INFO - reading train data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\train\agaricus-lepiota.csv
[2023-10-07 09:59:25,097]root - INFO - train file read successfull
[2023-10-07 09:59:25,097]root - INFO - rading test data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\test\agaricus-lepiota.csv
[2023-10-07 09:59:25,222]root - INFO - test file read successfull
[2023-10-07 09:59:25,222]root - INFO - schema column names are : ['cap-shape', 'cap-color', 'cap-surface', 'bruises', 'odor', 'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color', 'stalk-shape', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring', 'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number', 'ring-type', 'spore-print-color', 'population', 'habitat', 'target']
[2023-10-07 09:59:25,222]root - INFO - train dataframe column names are : ['cap-shape', 'cap-color', 'cap-surface', 'bruises', 'odor', 'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color', 'stalk-shape', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring', 'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number', 'ring-type', 'spore-print-color', 'population', 'habitat', 'target']
[2023-10-07 09:59:25,222]root - INFO - test dataframe column anmes are : ['cap-shape', 'cap-color', 'cap-surface', 'bruises', 'odor', 'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color', 'stalk-shape', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring', 'stalk-color-above-ring', 'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number', 'ring-type', 'spore-print-color', 'population', 'habitat', 'target']
[2023-10-07 09:59:25,222]root - INFO - train dataframe column names are correct
[2023-10-07 09:59:25,222]root - INFO - test dataframe column names are correct
[2023-10-07 09:59:25,222]root - INFO - get column data type validation function started
[2023-10-07 09:59:25,253]root - INFO - get train test dataframe function started
[2023-10-07 09:59:25,253]root - INFO - reading train data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\train\agaricus-lepiota.csv
[2023-10-07 09:59:25,300]root - INFO - train file read successfull
[2023-10-07 09:59:25,300]root - INFO - rading test data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\test\agaricus-lepiota.csv
[2023-10-07 09:59:25,347]root - INFO - test file read successfull
[2023-10-07 09:59:25,347]root - INFO - get and save data drift report function started
[2023-10-07 09:59:25,347]root - INFO - get train test dataframe function started
[2023-10-07 09:59:25,347]root - INFO - reading train data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\train\agaricus-lepiota.csv
[2023-10-07 09:59:25,394]root - INFO - train file read successfull
[2023-10-07 09:59:25,394]root - INFO - rading test data from : D:\projects\mushroom_classification\mashroom\artifact\data_ingestion\2023-10-07-09-59-08\ingested_data\test\agaricus-lepiota.csv
[2023-10-07 09:59:25,573]root - INFO - test file read successfull
[2023-10-07 09:59:29,441]root - INFO - report saved succesfully
[2023-10-07 09:59:29,441]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Validation log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 


[2023-10-07 09:59:29,441]root - INFO - get data transform config function started
[2023-10-07 09:59:29,441]root - INFO - data transform config : DataTransformConfig(transform_train_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_transform\\2023-10-07-09-59-08\\train', transform_test_dir='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_transform\\2023-10-07-09-59-08\\test', preprocessed_file_path='D:\\projects\\mushroom_classification\\mashroom\\artifact\\data_transform\\2023-10-07-09-59-08\\preprocessed\\preprocessed.pkl')
[2023-10-07 09:59:29,441]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Transformation log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-10-07 09:59:29,441]root - INFO - intiate data transform function started
[2023-10-07 09:59:29,441]root - INFO - get preprocessing object function staretd
[2023-10-07 09:59:29,441]root - INFO - -----pipeline esamble started-----
[2023-10-07 09:59:29,441]root - INFO - -----pipeline esamble completed-----
[2023-10-07 09:59:29,441]root - INFO - get perfrom preprocessing function started
[2023-10-07 09:59:29,457]root - INFO - -----reading train data started-----
[2023-10-07 09:59:29,488]root - INFO - ------reading train data completed-----
[2023-10-07 09:59:29,488]root - INFO - dropping target column from dataframe
[2023-10-07 09:59:29,504]root - INFO - columns names after dropping target column : Index(['cap-shape', 'cap-color', 'cap-surface', 'bruises', 'odor',
       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',
       'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',
       'stalk-surface-below-ring', 'stalk-color-above-ring',
       'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',
       'ring-type', 'spore-print-color', 'population', 'habitat'],
      dtype='object')
[2023-10-07 09:59:29,504]root - INFO - -----preprocessing on train data started-----
[2023-10-07 09:59:29,613]root - INFO - -----preprocessing on train data completed-----
[2023-10-07 09:59:29,613]root - INFO - one hot encoding on target data
[2023-10-07 09:59:29,629]root - INFO - combining input and output dataframes
[2023-10-07 09:59:29,629]root - INFO - get perfrom preprocessing function started
[2023-10-07 09:59:29,629]root - INFO - -----reading test data started-----
[2023-10-07 09:59:29,676]root - INFO - ------reading train data completed-----
[2023-10-07 09:59:29,676]root - INFO - dropping target column from dataframe
[2023-10-07 09:59:29,676]root - INFO - columns names after dropping target column : Index(['cap-shape', 'cap-color', 'cap-surface', 'bruises', 'odor',
       'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',
       'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',
       'stalk-surface-below-ring', 'stalk-color-above-ring',
       'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',
       'ring-type', 'spore-print-color', 'population', 'habitat'],
      dtype='object')
[2023-10-07 09:59:29,676]root - INFO - -----preprocessing on test data started-----
[2023-10-07 09:59:29,785]root - INFO - -----preprocessing on test data completed-----
[2023-10-07 09:59:29,785]root - INFO - one hot encoding on target data
[2023-10-07 09:59:29,785]root - INFO - combining input and output dataframes
[2023-10-07 09:59:29,801]root - INFO - save transformed train test data function started
[2023-10-07 09:59:29,801]root - INFO - saving transformed train file in : D:\projects\mushroom_classification\mashroom\artifact\data_transform\2023-10-07-09-59-08\train
[2023-10-07 09:59:30,177]root - INFO - saving transformed train file succesfull
[2023-10-07 09:59:30,177]root - INFO - saving transformed test file in : D:\projects\mushroom_classification\mashroom\artifact\data_transform\2023-10-07-09-59-08\test
[2023-10-07 09:59:30,637]root - INFO - saving transformed test file succesfull
[2023-10-07 09:59:30,647]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Data Transformation log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 


[2023-10-07 09:59:30,648]root - INFO - get model trainer function started
[2023-10-07 09:59:30,649]root - INFO - mode trainer config : ModelTrainerConfig(trained_model_file_path='D:\\projects\\mushroom_classification\\model_trainer\\2023-10-07-09-59-08\\model.pkl', base_accuracy=0.9, model_config_file_path='D:\\projects\\mushroom_classification\\config\\model.yaml')
[2023-10-07 09:59:30,649]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model Trainer log started.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
[2023-10-07 09:59:30,650]root - INFO - intiate model trainer function started
[2023-10-07 09:59:30,650]root - INFO - transform train file is avaiable at : D:\projects\mushroom_classification\mashroom\artifact\data_transform\2023-10-07-09-59-08\train
[2023-10-07 09:59:30,651]root - INFO - transform test file is avaiable at : D:\projects\mushroom_classification\mashroom\artifact\data_transform\2023-10-07-09-59-08\test
[2023-10-07 09:59:30,652]root - INFO - train file name is : train.csv
[2023-10-07 09:59:30,652]root - INFO - test file name is : train.csv
[2023-10-07 09:59:30,653]root - INFO - ------reading train data started-------
[2023-10-07 09:59:30,901]root - INFO - ------reading train data completed------
[2023-10-07 09:59:30,901]root - INFO - ------reading test data started-------
[2023-10-07 09:59:31,052]root - INFO - ------reading test data completed------
[2023-10-07 09:59:31,052]root - INFO - splitting data int input and output feature
[2023-10-07 09:59:31,052]root - INFO - reading model config file from D:\projects\mushroom_classification\config\model.yaml
[2023-10-07 09:59:31,052]root - INFO - making object of model factory class
[2023-10-07 09:59:31,114]root - INFO - base accuracy is : 0.9
[2023-10-07 09:59:31,114]root - INFO - get best model function started
[2023-10-07 09:59:31,114]root - INFO - get intlized model list function started
[2023-10-07 09:59:31,130]root - INFO - intlized model list : [InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression')]
[2023-10-07 09:59:31,360]root - INFO - intlized model list : [InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression'), InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier')]
[2023-10-07 09:59:31,360]root - INFO - intlized model list : [InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression'), InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier'), InitlizedModelDetails(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.tree.DecisionTreeClassifier')]
[2023-10-07 09:59:31,360]root - INFO - intlized model list : [InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression'), InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier'), InitlizedModelDetails(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.tree.DecisionTreeClassifier'), InitlizedModelDetails(model_serial_number='module_3', model=SVC(C=1), params_grid_search={'C': [1, 3, 5, 7, 9, 10]}, model_name='sklearn.svm.SVC')]
[2023-10-07 09:59:31,375]root - INFO - intlized model list : [InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression'), InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier'), InitlizedModelDetails(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.tree.DecisionTreeClassifier'), InitlizedModelDetails(model_serial_number='module_3', model=SVC(C=1), params_grid_search={'C': [1, 3, 5, 7, 9, 10]}, model_name='sklearn.svm.SVC'), InitlizedModelDetails(model_serial_number='module_4', model=GradientBoostingClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.GradientBoostingClassifier')]
[2023-10-07 09:59:31,375]root - INFO - intlized model list : [InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression'), InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier'), InitlizedModelDetails(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.tree.DecisionTreeClassifier'), InitlizedModelDetails(model_serial_number='module_3', model=SVC(C=1), params_grid_search={'C': [1, 3, 5, 7, 9, 10]}, model_name='sklearn.svm.SVC'), InitlizedModelDetails(model_serial_number='module_4', model=GradientBoostingClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.GradientBoostingClassifier'), InitlizedModelDetails(model_serial_number='module_5', model=AdaBoostClassifier(), params_grid_search={'n_estimators': [20, 30, 40, 50, 60, 70, 80, 90, 100]}, model_name='sklearn.ensemble.AdaBoostClassifier')]
[2023-10-07 09:59:31,375]root - INFO - Final model list is:[InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression'), InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier'), InitlizedModelDetails(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.tree.DecisionTreeClassifier'), InitlizedModelDetails(model_serial_number='module_3', model=SVC(C=1), params_grid_search={'C': [1, 3, 5, 7, 9, 10]}, model_name='sklearn.svm.SVC'), InitlizedModelDetails(model_serial_number='module_4', model=GradientBoostingClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.GradientBoostingClassifier'), InitlizedModelDetails(model_serial_number='module_5', model=AdaBoostClassifier(), params_grid_search={'n_estimators': [20, 30, 40, 50, 60, 70, 80, 90, 100]}, model_name='sklearn.ensemble.AdaBoostClassifier')]
[2023-10-07 09:59:31,375]root - INFO - initite best parameter for models function started
[2023-10-07 09:59:31,375]root - INFO - finding best model for : InitlizedModelDetails(model_serial_number='module_0', model=LogisticRegression(), params_grid_search={'penalty': ['l2']}, model_name='sklearn.linear_model.LogisticRegression')
[2023-10-07 09:59:31,375]root - INFO - finding best parameters for each models
[2023-10-07 09:59:32,563]root - INFO - best model is : GridSearchedBestModel(model_serial_number='module_0', model=LogisticRegression(), best_model=LogisticRegression(), best_parameters={'penalty': 'l2'}, best_scores=0.9995382246698643)
[2023-10-07 09:59:32,578]root - INFO - finding best model for : InitlizedModelDetails(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.RandomForestClassifier')
[2023-10-07 09:59:32,578]root - INFO - finding best parameters for each models
[2023-10-07 10:00:30,584]root - INFO - best model is : GridSearchedBestModel(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), best_model=RandomForestClassifier(max_depth=8), best_parameters={'max_depth': 8}, best_scores=1.0)
[2023-10-07 10:00:30,584]root - INFO - finding best model for : InitlizedModelDetails(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.tree.DecisionTreeClassifier')
[2023-10-07 10:00:30,584]root - INFO - finding best parameters for each models
[2023-10-07 10:00:33,788]root - INFO - best model is : GridSearchedBestModel(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), best_model=DecisionTreeClassifier(max_depth=9), best_parameters={'max_depth': 9}, best_scores=1.0)
[2023-10-07 10:00:33,788]root - INFO - finding best model for : InitlizedModelDetails(model_serial_number='module_3', model=SVC(C=1), params_grid_search={'C': [1, 3, 5, 7, 9, 10]}, model_name='sklearn.svm.SVC')
[2023-10-07 10:00:33,788]root - INFO - finding best parameters for each models
[2023-10-07 10:01:17,967]root - INFO - best model is : GridSearchedBestModel(model_serial_number='module_3', model=SVC(C=1), best_model=SVC(C=1), best_parameters={'C': 1}, best_scores=1.0)
[2023-10-07 10:01:17,967]root - INFO - finding best model for : InitlizedModelDetails(model_serial_number='module_4', model=GradientBoostingClassifier(max_depth=2), params_grid_search={'max_depth': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20]}, model_name='sklearn.ensemble.GradientBoostingClassifier')
[2023-10-07 10:01:17,967]root - INFO - finding best parameters for each models
[2023-10-07 10:05:35,354]root - INFO - best model is : GridSearchedBestModel(model_serial_number='module_4', model=GradientBoostingClassifier(max_depth=2), best_model=GradientBoostingClassifier(max_depth=4), best_parameters={'max_depth': 4}, best_scores=1.0)
[2023-10-07 10:05:35,354]root - INFO - finding best model for : InitlizedModelDetails(model_serial_number='module_5', model=AdaBoostClassifier(), params_grid_search={'n_estimators': [20, 30, 40, 50, 60, 70, 80, 90, 100]}, model_name='sklearn.ensemble.AdaBoostClassifier')
[2023-10-07 10:05:35,354]root - INFO - finding best parameters for each models
[2023-10-07 10:06:30,354]root - INFO - best model is : GridSearchedBestModel(model_serial_number='module_5', model=AdaBoostClassifier(), best_model=AdaBoostClassifier(n_estimators=20), best_parameters={'n_estimators': 20}, best_scores=1.0)
[2023-10-07 10:06:30,370]root - INFO - Best individual models with paramater is :[GridSearchedBestModel(model_serial_number='module_0', model=LogisticRegression(), best_model=LogisticRegression(), best_parameters={'penalty': 'l2'}, best_scores=0.9995382246698643), GridSearchedBestModel(model_serial_number='module_1', model=RandomForestClassifier(max_depth=2), best_model=RandomForestClassifier(max_depth=8), best_parameters={'max_depth': 8}, best_scores=1.0), GridSearchedBestModel(model_serial_number='module_2', model=DecisionTreeClassifier(max_depth=2), best_model=DecisionTreeClassifier(max_depth=9), best_parameters={'max_depth': 9}, best_scores=1.0), GridSearchedBestModel(model_serial_number='module_3', model=SVC(C=1), best_model=SVC(C=1), best_parameters={'C': 1}, best_scores=1.0), GridSearchedBestModel(model_serial_number='module_4', model=GradientBoostingClassifier(max_depth=2), best_model=GradientBoostingClassifier(max_depth=4), best_parameters={'max_depth': 4}, best_scores=1.0), GridSearchedBestModel(model_serial_number='module_5', model=AdaBoostClassifier(), best_model=AdaBoostClassifier(n_estimators=20), best_parameters={'n_estimators': 20}, best_scores=1.0)]
[2023-10-07 10:06:30,370]root - INFO - get best model from grid searched best model
[2023-10-07 10:06:30,370]root - INFO - best model here : LogisticRegression()
[2023-10-07 10:06:30,370]root - INFO - best model here : RandomForestClassifier(max_depth=8)
[2023-10-07 10:06:30,386]root - INFO - best model on trained data is : RandomForestClassifier(max_depth=8)
[2023-10-07 10:06:30,448]root - INFO - get evulated classification model function started
[2023-10-07 10:06:30,448]root - INFO - model list : [LogisticRegression(), RandomForestClassifier(max_depth=8), DecisionTreeClassifier(max_depth=9), SVC(C=1), GradientBoostingClassifier(max_depth=4), AdaBoostClassifier(n_estimators=20)]
[2023-10-07 10:06:30,448]root - INFO - -----------------for model : LogisticRegression()----------------------
[2023-10-07 10:06:30,479]root - INFO - train accuracy : 1.0
[2023-10-07 10:06:30,479]root - INFO - test accuracy : 1.0
[2023-10-07 10:06:30,479]root - INFO - model accuracy : 1.0
[2023-10-07 10:06:30,479]root - INFO - diff in train and test accuracy is : 0.0
[2023-10-07 10:06:30,479]root - INFO - -----------------for model : RandomForestClassifier(max_depth=8)----------------------
[2023-10-07 10:06:30,761]root - INFO - train accuracy : 1.0
[2023-10-07 10:06:30,761]root - INFO - test accuracy : 1.0
[2023-10-07 10:06:30,761]root - INFO - model accuracy : 1.0
[2023-10-07 10:06:30,761]root - INFO - diff in train and test accuracy is : 0.0
[2023-10-07 10:06:30,761]root - INFO - -----------------for model : DecisionTreeClassifier(max_depth=9)----------------------
[2023-10-07 10:06:30,776]root - INFO - train accuracy : 1.0
[2023-10-07 10:06:30,776]root - INFO - test accuracy : 1.0
[2023-10-07 10:06:30,776]root - INFO - model accuracy : 1.0
[2023-10-07 10:06:30,776]root - INFO - diff in train and test accuracy is : 0.0
[2023-10-07 10:06:30,776]root - INFO - -----------------for model : SVC(C=1)----------------------
[2023-10-07 10:06:34,105]root - INFO - train accuracy : 1.0
[2023-10-07 10:06:34,105]root - INFO - test accuracy : 1.0
[2023-10-07 10:06:34,105]root - INFO - model accuracy : 1.0
[2023-10-07 10:06:34,105]root - INFO - diff in train and test accuracy is : 0.0
[2023-10-07 10:06:34,105]root - INFO - -----------------for model : GradientBoostingClassifier(max_depth=4)----------------------
[2023-10-07 10:06:34,199]root - INFO - train accuracy : 1.0
[2023-10-07 10:06:34,199]root - INFO - test accuracy : 1.0
[2023-10-07 10:06:34,199]root - INFO - model accuracy : 1.0
[2023-10-07 10:06:34,199]root - INFO - diff in train and test accuracy is : 0.0
[2023-10-07 10:06:34,199]root - INFO - -----------------for model : AdaBoostClassifier(n_estimators=20)----------------------
[2023-10-07 10:06:34,449]root - INFO - train accuracy : 1.0
[2023-10-07 10:06:34,449]root - INFO - test accuracy : 1.0
[2023-10-07 10:06:34,449]root - INFO - model accuracy : 1.0
[2023-10-07 10:06:34,449]root - INFO - diff in train and test accuracy is : 0.0
[2023-10-07 10:06:34,449]root - INFO - ----------best model after train and test evulation : AdaBoostClassifier(n_estimators=20) accuracy : 1.0-----------
[2023-10-07 10:06:34,449]root - INFO - model name is : model.pkl
[2023-10-07 10:06:34,527]root - INFO - model saved successfully
[2023-10-07 10:06:34,558]root - INFO - >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Model trainer log completed.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 


